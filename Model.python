from data_preprocessing import load_and_preprocess_data
from model_training import train_model

if __name__ == "__main__":
    X_train, X_test, y_train, y_test = load_and_preprocess_data()
    train_model(X_train, X_test, y_train, y_test)
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

def load_and_preprocess_data():
    # Load data from GitHub (or local CSV if available)
    url = "https://raw.githubusercontent.com/selva86/datasets/master/BostonHousing.csv"
    df = pd.read_csv(url)

    # Feature matrix and target
    X = df.drop(columns=["medv"])  # medv = median value (target)
    y = df["medv"]

    # Normalize features
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)

    # Save scaler
    import pickle
    with open("scaler.pkl", "wb") as f:
        pickle.dump(scaler, f)

    return train_test_split(X_scaled, y, test_size=0.2, random_state=42)
# Model Training
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import pickle

def train_model(X_train, X_test, y_train, y_test):
    model = LinearRegression()
    model.fit(X_train, y_train)

    y_pred = model.predict(X_test)
    print("R2 Score:", r2_score(y_test, y_pred))
    print("RMSE:", mean_squared_error(y_test, y_pred, squared=False))

    # Save model
    with open("house_price_model.pkl", "wb") as f:
        pickle.dump(model, f)

    print("Model saved to house_price_model.pkl")
# For Making Prediction
import pickle
import numpy as np

def load_model(path="house_price_model.pkl"):
    with open(path, "rb") as f:
        return pickle.load(f)

def load_scaler(path="scaler.pkl"):
    with open(path, "rb") as f:
        return pickle.load(f)

def predict_price(features: list):
    model = load_model()
    scaler = load_scaler()
    features_scaled = scaler.transform([features])
    return model.predict(features_scaled)[0]
